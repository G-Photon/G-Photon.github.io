{
    "version": "https://jsonfeed.org/version/1",
    "title": "不确定的光子",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/06/01/OpenGL%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-1/",
            "url": "http://example.com/2025/06/01/OpenGL%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-1/",
            "title": "OpenGL学习历程(1)",
            "date_published": "2025-06-01T14:54:31.000Z",
            "content_html": "<p>此系列记录我跟随 LearnOpenGL 学习的历程。</p>\n<h2 id=\"第一章\"><a class=\"anchor\" href=\"#第一章\">#</a> 第一章</h2>\n<h3 id=\"安装opengl\"><a class=\"anchor\" href=\"#安装opengl\">#</a> 安装 OpenGL</h3>\n<p>如果是 Windows 端，我使用的 msvc+xmake+vscode 开发环境。msvc 安装直接从微软官方下载 Visual Studio，xmake 用于项目构建和 c++ 库管理，vscode 轻巧方便。<br />\nxmake 的安装，这里推荐从 Scoop 安装 xmake。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 可选：首次运行远程脚本时需要</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Set-ExecutionPolicy RemoteSigned <span class=\"token parameter variable\">-Scope</span> CurrentUser</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装 Scoop 的命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Invoke-RestMethod get.scoop.sh <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 从 Scoop 安装 xmake</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>scoop <span class=\"token function\">install</span> xmake</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># xmake 生成项目</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xmake create opengl</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> opengl</pre></td></tr></table></figure><p>关于 xmake 在 vscode 环境的配置，xmake 无法用 vscode C/C++ 扩展默认的 InteltiSense 进行语法补全和语法检查，所以我们需要用 Clangd 代替，在 vscode 安装 Clangd 扩展，如果原先没有安装 Clangd 会自动安装，也可以用 scoop 安装 Clangd。<br />\n但是仅仅有 Clangd 是不够的，我们需要在 xmake.lua 中进行如下配置修改，修改后编译成功通过一次后则可以检测到新的库。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xmake.lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+ add_rules<span class=\"token punctuation\">(</span><span class=\"token string\">\"plugin.compile_commands.autoupdate\"</span>, <span class=\"token punctuation\">&#123;</span>outputdir <span class=\"token operator\">=</span> <span class=\"token string\">\".vscode\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>而 xmake 自身的调试无法在 vscode 上进行方便的断点检查，所以我们利用 vscode C/C++ 扩展所带的调试功能，在.vscode 文件夹下新建 launch.json，配置如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    // 使用 IntelliSense 了解相关属性。 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    // 悬停以查看现有属性的描述。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid<span class=\"token operator\">=</span><span class=\"token number\">830387</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0.2.0\"</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"configurations\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"(gdb) 启动\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"cppvsdbg\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token string\">\"request\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"launch\"</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">\"program\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;workspaceFolder&#125;</span>/build/windows/x64/debug/a.exe\"</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"args\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token string\">\"stopAtEntry\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token string\">\"cwd\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;fileDirname&#125;</span>\"</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token string\">\"environment\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token string\">\"externalConsole\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们进行 OpenGL 开发所需相关的库有 glad、glfw（后续还有 assimp、glm 等），在这里我们额外用 imgui 作为界面库，在 xmake.lua 中进行修改</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xmake.lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+ add_requires<span class=\"token punctuation\">(</span><span class=\"token string\">\"glad\"</span>,<span class=\"token string\">\"glfw\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+ add_requires<span class=\"token punctuation\">(</span><span class=\"token string\">\"imgui\"</span>,<span class=\"token punctuation\">&#123;</span>configs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>glfw <span class=\"token operator\">=</span> true, opengl3 <span class=\"token operator\">=</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>target<span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    set_kind<span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    add_files<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/main.cpp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+   add_packages<span class=\"token punctuation\">(</span><span class=\"token string\">\"glfw\"</span>, <span class=\"token string\">\"glad\"</span>, <span class=\"token string\">\"imgui\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>关于 imgui 的配置，我们在 main.cpp 的添加如下头文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>main.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+ <span class=\"token comment\">#include \"imgui.h\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+ <span class=\"token comment\">#include \"imgui_impl_glfw.h\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+ <span class=\"token comment\">#include \"imgui_impl_opengl3.h\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+ <span class=\"token comment\">#include \"imgui_impl_opengl3_loader.h\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>之后利用 xmake 进行 build，xmake 会自动下载库进行配置。</p>\n<h3 id=\"纹理引用我们自己的头文件\"><a class=\"anchor\" href=\"#纹理引用我们自己的头文件\">#</a> 纹理（引用我们自己的头文件）</h3>\n<p>在纹理一节中，我们需要添加新的 stb_image.h 单头文件图像加载库，我们可以在项目下新建 include 文件夹，将 stb_image.h 头文件放入 include 文件夹中，将.cpp 文件放入 source 文件夹中（如果有的话）。之后在 xmake.lua 下将 include 文件夹中的头文件都加入链接：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xmake.lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>target<span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    set_kind<span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+   add_includedirs<span class=\"token punctuation\">(</span><span class=\"token string\">\"include\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    add_files<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/main.cpp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    add_packages<span class=\"token punctuation\">(</span><span class=\"token string\">\"glfw\"</span>, <span class=\"token string\">\"glm\"</span>, <span class=\"token string\">\"imgui\"</span>, <span class=\"token string\">\"assimp\"</span>, <span class=\"token string\">\"glad\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>由于 OpenGL 要求 y 轴坐标在图片底部，但是图片的 y 轴坐标通常在顶部，所以我们可以借助 stb_image.h 在图像加载时帮助我们翻转 y 轴，只需要在加载任何图像前加入以下语句即可：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stbi_set_flip_vertically_on_load<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>值得注意的是，后续用 assimp 导入的模型纹理，大部分模型纹理 (比如米哈游官方提供的各类模型) 进行了处理，本身图像 y 轴便是反的，此时不用再翻转 y 轴。</p>\n<h3 id=\"变换\"><a class=\"anchor\" href=\"#变换\">#</a> 变换</h3>\n<p>这一章主要涉及的是矩阵相关知识，比较重点的是关于旋转部分，欧拉角与四元数<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>v</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>v</mi><mi>y</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>v</mi><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q=(cos(\\frac{\\theta }{2} ),sin(\\frac{\\theta }{2} )*vx,sin(\\frac{\\theta }{2} )*vy,sin(\\frac{\\theta }{2} )*vz)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>欧拉角：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>、欧拉角的旋转顺序非常重要，不同的旋转顺序得到的最终旋转结果不一致。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>、使用欧拉角描述三维旋转时，当一个旋转轴与另一个旋转轴重合时，系统失去一个自由度，导致无法独立控制所有旋转方向，即万向节死锁现象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>、物体角度状态与欧拉角坐标并非一一对应关系，某些位置状态并不唯一确定一组欧拉角坐标。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>四元数：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span>、包含了四个实参数以及三个虚部（一个实部三个虚部）。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span>、不会产生万向节死锁现象。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3</span>、可以插值，不同的四元数对应的旋转是唯一的，多次旋转可以进行计算上的优化。</pre></td></tr></table></figure><p>同时引用了 glm 库，该库同样只需要通过 xmake 引入即可：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xmake.lua</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+ add_requires<span class=\"token punctuation\">(</span><span class=\"token string\">\"glm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>target<span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    set_kind<span class=\"token punctuation\">(</span><span class=\"token string\">\"binary\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    add_includedirs<span class=\"token punctuation\">(</span><span class=\"token string\">\"include\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    add_files<span class=\"token punctuation\">(</span><span class=\"token string\">\"src/main.cpp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-   add_packages<span class=\"token punctuation\">(</span><span class=\"token string\">\"glfw\"</span>, <span class=\"token string\">\"glad\"</span>, <span class=\"token string\">\"imgui\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+   add_packages<span class=\"token punctuation\">(</span><span class=\"token string\">\"glfw\"</span>, <span class=\"token string\">\"glad\"</span>, <span class=\"token string\">\"imgui\"</span>,<span class=\"token string\">\"glm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><h3 id=\"坐标系统\"><a class=\"anchor\" href=\"#坐标系统\">#</a> 坐标系统</h3>\n<p>首先要记住，OpenGL 默认是 x 轴朝右，y 轴朝上，z 轴朝内 (朝向你自己)。</p>\n<ul>\n<li>\n<p><strong>局部坐标</strong>，是对象相对于局部原点的坐标，也是物体起始的坐标。比如，最原始的处于远点的一个立方体。</p>\n</li>\n<li>\n<p><strong>世界空间</strong>，世界空间坐标是处于一个更大的空间范围的。这些坐标相对于世界的全局原点，它们会和其它物体一起相对于世界的原点进行摆放。比如，我们将处于原点的立方体摆放到我们需要摆放到的位置。</p>\n</li>\n<li>\n<p><strong>观察空间</strong>，每个坐标都是从摄像机或者说观察者的角度进行观察的。比如，我们将立方体相对于原点的坐标转换为相对于摄像机的坐标，如果我们要将摄像机向后移动，那么我们将整个场景向前移动，两者是一样的。</p>\n</li>\n<li>\n<p><strong>裁剪空间</strong>，坐标到达观察空间之后，我们需要将其投影到裁剪坐标。裁剪坐标会被处理至 - 1.0 到 1.0 的范围内，并判断哪些顶点将会出现在屏幕上。最常用的投影有正视投影、透视投影。这里要注意，经过透视投影后是非线性的，后续对法向量的处理需要注意。</p>\n</li>\n<li>\n<p><strong>屏幕空间</strong>，我们将使用一个叫做视口变换 (Viewport Transform) 的过程。视口变换将位于 - 1.0 到 1.0 范围的坐标变换到由 glViewport 函数所定义的坐标范围内。最后变换出来的坐标将会送到光栅器，将其转化为片段。</p>\n</li>\n</ul>\n<p>各个坐标的变换关系是这样的：<br />\n局部空间 --<em><strong>model</strong></em>--&gt; 世界空间 --<em><strong>view</strong></em>--&gt; 观察空间 --<em><strong>projection</strong></em>--&gt; 裁剪空间 --<em><strong> 视口变换</strong></em> --&gt; 屏幕空间<br />\n在这里的<em><strong> model</strong></em>、<em><strong>view</strong></em>、<em><strong>projection</strong></em> 为变换矩阵，比如对坐标<em><strong> x</strong></em> 进行变换时候，最后变换的结果是<em><strong> projection</strong></em>*<em><strong>view</strong></em>*<em><strong>model</strong></em>*x，矩阵乘法的顺序不能错，其中<em><strong> projection</strong></em>*<em><strong>view</strong></em>*<em><strong>model</strong></em> 得到的结果称为 MVP 矩阵。</p>\n<h3 id=\"摄像机\"><a class=\"anchor\" href=\"#摄像机\">#</a> 摄像机</h3>\n<p>一个仿照 Unity 摄像机移动系统（WASD 控制前后左右，Q 上升，E 下降）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>main.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>void processInput<span class=\"token punctuation\">(</span>GLFWwindow *window<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_ESCAPE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        glfwSetWindowShouldClose<span class=\"token punctuation\">(</span>window, <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        myCamera.ProcessKeyboard<span class=\"token punctuation\">(</span>FORWARD, deltaTime * MoveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_S<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        myCamera.ProcessKeyboard<span class=\"token punctuation\">(</span>BACKWARD, deltaTime * MoveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_A<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        myCamera.ProcessKeyboard<span class=\"token punctuation\">(</span>LEFT, deltaTime * MoveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_D<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        myCamera.ProcessKeyboard<span class=\"token punctuation\">(</span>RIGHT, deltaTime * MoveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_Q<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        myCamera.ProcessKeyboard<span class=\"token punctuation\">(</span>UP, deltaTime * MoveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_E<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        myCamera.ProcessKeyboard<span class=\"token punctuation\">(</span>DOWN, deltaTime * MoveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_F<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cameraMouseControl <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>cameraMouseControl<span class=\"token punctuation\">;</span> // 切换摄像机控制模式</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glfwGetKey<span class=\"token punctuation\">(</span>window, GLFW_KEY_R<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GLFW_PRESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        myCamera.Reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // 重置摄像机位置和方向</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>camera.h</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>void ProcessKeyboard<span class=\"token punctuation\">(</span>Camera_Movement direction, float deltaTime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        float velocity <span class=\"token operator\">=</span> MovementSpeed * deltaTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> FORWARD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            Position <span class=\"token operator\">+=</span> glm::vec3<span class=\"token punctuation\">(</span>Front.x, <span class=\"token number\">0</span>.0f, Front.z<span class=\"token punctuation\">)</span> * velocity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> BACKWARD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            Position -<span class=\"token operator\">=</span> glm::vec3<span class=\"token punctuation\">(</span>Front.x, <span class=\"token number\">0</span>.0f, Front.z<span class=\"token punctuation\">)</span> * velocity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> LEFT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            Position -<span class=\"token operator\">=</span> glm::vec3<span class=\"token punctuation\">(</span>Right.x, <span class=\"token number\">0</span>.0f, Right.z<span class=\"token punctuation\">)</span> * velocity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> RIGHT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            Position <span class=\"token operator\">+=</span> glm::vec3<span class=\"token punctuation\">(</span>Right.x, <span class=\"token number\">0</span>.0f, Right.z<span class=\"token punctuation\">)</span> * velocity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> UP<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            Position <span class=\"token operator\">+=</span> glm::vec3<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>.0f, <span class=\"token number\">1</span>.0f, <span class=\"token number\">0</span>.0f<span class=\"token punctuation\">)</span> * velocity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> DOWN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            Position -<span class=\"token operator\">=</span> glm::vec3<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>.0f, <span class=\"token number\">1</span>.0f, <span class=\"token number\">0</span>.0f<span class=\"token punctuation\">)</span> * velocity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>如果你引用了 imgui 作为界面库，为了使鼠标作用不冲突，可以进行如下修改：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>main.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>void mouse_callback<span class=\"token punctuation\">(</span>GLFWwindow *window, double xpos, double ypos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    // 获取 ImGui 的 IO 状态</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ImGuiIO <span class=\"token operator\">&amp;</span>io <span class=\"token operator\">=</span> ImGui::GetIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    // 如果 ImGui 正在使用鼠标，或左键未按下时，不处理视角移动</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>io.WantCaptureMouse <span class=\"token operator\">||</span> glfwGetMouseButton<span class=\"token punctuation\">(</span>window, GLFW_MOUSE_BUTTON_LEFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> GLFW_PRESS <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>cameraMouseControl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        firstMouse <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> // 重置初始位置标记</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstMouse<span class=\"token punctuation\">)</span> // 这个bool变量初始时是设定为true的</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        lastX <span class=\"token operator\">=</span> xpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        lastY <span class=\"token operator\">=</span> ypos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        firstMouse <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    float xoffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xpos - lastX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    float yoffset <span class=\"token operator\">=</span> lastY - ypos<span class=\"token punctuation\">;</span> // 注意这里是相反的，因为y坐标是从底部往顶部依次增大的</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cameraMouseControl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        xoffset *<span class=\"token operator\">=</span> cameraSpeed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        yoffset *<span class=\"token operator\">=</span> cameraSpeed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    lastX <span class=\"token operator\">=</span> xpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    lastY <span class=\"token operator\">=</span> ypos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    myCamera.ProcessMouseMovement<span class=\"token punctuation\">(</span>xoffset, yoffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2022/10/02/hello-world/",
            "url": "http://example.com/2022/10/02/hello-world/",
            "title": "Hello world！！！",
            "date_published": "2022-10-02T09:15:42.965Z",
            "content_html": "<p>许久之前便想写一个自己的博客，苦于一直没时间<span class=\"spoiler\" title=\"你知道得太多了\">一直在摸鱼</span>，难得国庆假期，抽空写了一个。利用 hexo+shoka <span class=\"spoiler\" title=\"你知道得太多了\">因为很好看</span>，写了一个，这篇文章，便是我学习博客路的 hello world 了。</p>\n<h2 id=\"计划\"><a class=\"anchor\" href=\"#计划\">#</a> 计划</h2>\n<h3 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h3>\n<p>后续打算把我学习过程中的笔记，经验都记录到博客里，大致是三个类型，机器学习，算法题，以及学习过程中的笔记。第一篇博客就这样到此为止了。再来打印一个 hello world <span class=\"spoiler\" title=\"你知道得太多了\">博客的</span>。</p>\n<h3 id=\"创建一个新文章\"><a class=\"anchor\" href=\"#创建一个新文章\">#</a> 创建一个新文章</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><h3 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><h3 id=\"继承静态文件\"><a class=\"anchor\" href=\"#继承静态文件\">#</a> 继承静态文件</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><h3 id=\"上传\"><a class=\"anchor\" href=\"#上传\">#</a> 上传</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}